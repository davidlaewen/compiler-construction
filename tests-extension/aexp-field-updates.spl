data AExp {
  Add(ladd : AExp, radd : AExp),
  Mul(lmul : AExp, rmul : AExp),
  Neg(neg : AExp),
  Lit(lit : Int),
  VarX(), VarY()
}

var aexp = Mul(VarX(), VarY()); // `x * y`

// Evaluate arithmetic expression with valuation given by inputs `x` and `y`
eval(a,x,y) :: AExp Int Int -> Int {
  if (isAdd(a)) {
    return eval(a.ladd,x,y) + eval(a.radd,x,y); } else {
  if (isMul(a)) {
    return eval(a.lmul,x,y) * eval(a.rmul,x,y); } else {
  if (isNeg(a)) {
    return -1 * eval(a.neg,x,y); } else {
  if (isLit(a)) {
    return a.lit; } else {
  if (isVarX(a)) {
    return x; } else { return y; }}}}}
}

main() {
  var res = 0;
  var two = Add(Lit(1),Lit(1)); // `1 + 1`
  aexp.lmul = two; // `(1 + 1) * y`
  aexp.rmul = Add(VarX(),VarX()); // `(1 + 1) * (x + x)`
  aexp.rmul.radd = Neg(Neg(VarY())); // `(1 + 1) * (x + -(-y))`
  aexp.rmul.radd.neg.neg = Lit(20); // `(1 + 1) * (x + -(-20))`
  res = eval(aexp,1,0); // let x := 1 in `(1 + 1) * (x + -(-20))`

  // Evaluation result should be 42
  print(res);
  print(' ');

  // Should evaluate to 2
  print(eval(two,1,1));
  print(' ');

  two.ladd = Neg(Lit(200));
  two.radd = Mul(Add(Lit(0),Lit(0)),Lit(101)); // `-200 + (0 + 0) * 101`
  two.radd.lmul.ladd = Lit(-1); // `-200 + (-1 + 0) * 101`
  two.radd.lmul.radd = VarY(); // `-200 + (-1 + y) * 101`

  // Should also evaluate to 42
  print( eval(aexp,1,3) );

  return;
}
