// Parsing of polymorphic ADTs

data Maybe<b> {
  None(), Some(some : b)
}

data Colour<c> {
  Red(), Green(), Blue()
}

var x = test(1);
var mTrue = Some(True);

test(x) :: a -> a {
  var y = x;
  var z = y + 1;
  return 1;
}

fromMaybe(d,m) :: a Maybe<a> -> a {
  if (isNone(m)) {
    return d;
  } else {
    return m.some;
  }
}

const_x() {
  return x;
}

main() {
  var y = const_x();
  print(fromMaybe(0,None()));
  print(' ');
  print(fromMaybe(0,Some(42)));

  if (x >= y) {
    print('T');
  } else {
    print('F');
  }

  return;
}
