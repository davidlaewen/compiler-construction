// Integer rose trees
// Type of nodes: μ α. Int × [α]
// We can use a custom data/record type to construct the above infinite
// recursive type given above.

data RoseTreeInt {
  Node(label : Int, forest : [RoseTreeInt])
}

var exTree123 = Node(1, Node(2,[]) : Node(3,[]) : []);
/*  1
   / \
  2   3 */

var exTree2468 = Node(2, Node(4, Node(6,[]):[]) : Node(8,[]):[] );
/*    2
     / \
    4   8
   /
  6       */

sumLabelsList(l) :: [RoseTreeInt] -> Int {
  if (isEmpty(l)) {
    return 0;
  } else {
    return sumLabels(l.hd) + sumLabelsList(l.tl);
  }
}

sumLabels(t) :: RoseTreeInt -> Int {
  return t.label + sumLabelsList(t.forest);
}

main() {
  var res = sumLabels(exTree123);
  print(res);
  res = sumLabels(exTree2468);
  print(' ');
  print(res);
  return;
}
